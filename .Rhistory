makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(x <- 1:100)
x <- 1:40
x <- 1:41
makeVector(x)
cachemean(x)
## loading matlib package to solve matrices
library(matlib)
## install and load matlib package to solve matrices
install.packages("matlib")
library(matlib)
library(datasets)
makeVector()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set,get = get,
setinv = setinv,
getinv = getinv)
}
?inv
## PRACTICE FILE
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set,get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- inv(data,...)
x$setinv(m)
m
}
